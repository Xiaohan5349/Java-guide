primitive data type: int, short, long, float, double, char, byte, boolean, null
the difference between == and equals  when the equals method is from object, == is same with equals, they both compare if it's the same object, howerver from other class
this method may be overwriten, like the String.equals(). it's compare if they are same meaning that's say if the string are same.
enum type are not primitive data type so all sepecific values are references from a specific object, same vlaue from same object. so the == and
equal are same.

each variable has a name(which represents the location in the memory) and data type, size and value(which represents the data stroed in the
memory). Each variable has its own scope.

random: Math.random    Random r1 = new Random(value), r1.nextInt/nextBoolean/nextDouble

final static define constant

In java's output: string + number = string, number + number + string = sum+ string

static import: import static java.lang.Math.*, we can use abs(100) directly without Math.abs()

\t 8 space   string\t 8 space including string.

when compare two double/float value which is bigger, we should use the abs of the sub of the two variable with a specific field.

String are objects in java, so we should use String.equals() instead of == to see if two strings are same.

Integer.parseInt(String s, int radix) pares the string s to be a interger with the specific radix.

differences of Integer.parseInt() and Integer.valueOf(): parseInt() return int and valueOf() return Integer,and valueOf() will maintain a
cache if the int is in the range of cache, it will get the object from the cache else it will create a new object.

final and static: static not refer to different objects, it's only one and final will refer to different objects and it can't be changed.

Calendar.get(Calendar.month) need to +1 as the month begins at 0; Calendar.get(Calendar.Day_Of_Week) need to -1 as the week begins at Sunday,
and the sunday weekday is 0.

in java, all argument is passed by value not reference, you can change the status of a object but now way to let him point a new object.

1. final class can't be inherited, all members and methods in final class will be final implicit.
2. final variable can't be changed. when you use final to define a variable which is primitive and String and initilized, JVM
will regard it as a constant. with final the variable can't be changed or point another object, but the member of the object can
change. We can use final static to define a constant.
3. Final method can't be Overridden.
4. we can use final to creat class that's not allowed to be changed. Its propeties can't be changed and it can't have child class.(like String).
this class can be used in multi-thread safely and convinent. As we can access them without lock, it's high perfomanced.
