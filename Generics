1. with generics you can store just one type of data sets like arraylist.

2. Generics object can do autoboxing. Generics parameters must be reference type, can't be primitive type.
Generics can't define array.  Type variable/parameter(T) can't be instantiated.

3. Generic Type can't extend from Throwable, so we can't catch type variable(T) Exception.
(public class Problem< T > extends Exception) error!!!!

4. the type variable/parameter(T) member of a class can't be static.

5. why static method can't access the non-static member of the class? Because we konw that the static method belong to the whole
class that we can use ClassName.SataicMethod to call it, if we allow it to access the non-static member, so assume we have two
object of these class, which member will the static method access???

so that's why when we define a static generic method, we need to declare <T> before the method name like this:
Public static<G> void<T> doIt()
We should notice that the generic type the static method define has no relationship with the generic type of the class, so that code is better
class A<T>{
  static<G> void doIt(){}
}


6. one thing that the method with a generic<parentCLass> parameter method can't use a generic<childClass> object as the practic parameter.

5. two way to extends a generic class:
class child<T> extends parent<T>            class child extends parent<String>

6. the polymorphism in Generics

7. wildcard types ¿‡–ÕÕ®≈‰∑˚

8. Type erasure    Covariance     Contravariance
Array has the covriance means that as the object is super class of String, object[] is the super class of String[]
Type erasue is the core to achieve the generics. etc
List<String> abc = new ArrayList();
List<Integer> cba = new ArrayList()
While compiling, the type of generics like String and Integer are all erasured as object(while no constraint exists), that's why we can't assign like abc = cba, as the uncertain
of the data type may throws a error.

if the generics have multi constraints, it will erasure based on the first constraint. examples:
<T extends Comparable & Serializable> T mtd(){ }             Comparable mtd(){ }

why this happened is that the JVM doesn't support generics directly.

type check aims at reference not object.


there is a interfaceName<T>, if when we create object: interfaceName abc = (); that we leave out <T>.

9. In an anonymous class, it can only access the final field of the nested class, as the anonymous class is enclosure and it
will copy the value of variable outside, so if you change the value of outside variable, it will be confused which version that
the anonymous class should access, so it should be final type.
